<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.xupt.mybatis.dao.EmployeeMapperDynamicSQL">
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>

    <!--if-->

    <!-- 查询员工，要求，携带了哪个字段查询条件就带上这个字段的值 -->
    <!-- public List<Employee> getEmpsByConditionIf(Employee employee); -->
    <select id="getEmpsByConditionIf" resultType="com.xupt.mybatis.pojo.Employee">
        <!-- test：判断表达式（OGNL）
        OGNL参照PPT或者官方文档。
        c:if  test
        从参数中取值进行判断
        遇见特殊符号应该去写转义字符：
        &&：&amp;&amp;
        -->
        select * from tbl_employee
        <where>
            <if test="id!=null">
                id=#{id}
            </if>
            <if test="lastName!=null and lastName!=''">
                and last_name like #{lastName}
            </if>
            <!-- ognl会进行字符串与数字的转换判断  "0"==0 -->
            <if test="gender==0 or gender==1">
                and gender = #{gender}
            </if>
            <if test="email!=null and email.trim()!=''">
                and email = #{email}
            </if>
        </where>
    </select>

    <!--trim (where, set)-->

    <select id="getEmpsByConditionTrim" resultType="com.xupt.mybatis.pojo.Employee">

        select * from tbl_employee
        <!-- 后面多出的and或者or where标签不能解决
	 	prefix="":前缀：trim标签体中是整个字符串拼串 后的结果。
	 			prefix给拼串后的整个字符串加一个前缀
	 	prefixOverrides="":
	 			前缀覆盖： 去掉整个字符串前面多余的字符
	 	suffix="":后缀
	 			suffix给拼串后的整个字符串加一个后缀
	 	suffixOverrides=""
	 			后缀覆盖：去掉整个字符串后面多余的字符-->

        <!-- 自定义字符串的截取规则 -->
        <trim prefix="where" suffixOverrides="and">
            <if test="id!=null">
                id=#{id} and
            </if>
            <if test="lastName!=null and lastName!=''">
                last_name like #{lastName} and
            </if>
            <!-- ognl会进行字符串与数字的转换判断  "0"==0 -->
            <if test="gender==0 or gender==1">
                gender = #{gender} and
            </if>
            <if test="email!=null and email.trim()!=''">
                email = #{email}
            </if>
        </trim>
    </select>

    <!--choose (when, otherwise):分支选择；带了break的swtich-case-->
    <!--如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个-->
    <select id="getEmpsByConditionChoose" resultType="com.xupt.mybatis.pojo.Employee">
        select * from tbl_employee
        <where>
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="lastName!=null and lastName!=''">
                    last_name like #{lastName}
                </when>
                <when test="email!=null and email.trim()!=''">
                    email = #{email}
                </when>
                <otherwise>
                    gender = 0
                </otherwise>
            </choose>
        </where>
    </select>


    <select id="getEmpsByConditionForeach" resultType="com.xupt.mybatis.pojo.Employee">
        select * from tbl_employee
        <!--
	 		collection：指定要遍历的集合：
	 			list类型的参数会特殊处理封装在map中，map的key就叫list
	 		item：将当前遍历出的元素赋值给指定的变量
	 		separator:每个元素之间的分隔符
	 		open：遍历出所有结果拼接一个开始的字符
	 		close:遍历出所有结果拼接一个结束的字符
	 		index:索引。遍历list的时候是index就是索引，item就是当前值
	 				      遍历map的时候index表示的就是map的key，item就是map的值

	 		#{变量名}就能取出变量的值也就是当前遍历出的元素
	 	  -->
        <foreach collection="ids" item="item_id"
                 open="where id in (" close=")" separator=",">
            #{item_id}
        </foreach>
    </select>


    <update id="updateEmp">
        update tbl_employee
        <!-- Set标签的使用 -->
        <!--      <set>
                  <if test="lastName!=null">
                      last_name=#{lastName},
                  </if>
                  <if test="gender!=null">
                      gender=#{gender},
                  </if>
                  <if test="email!=null">
                      email=#{email}
                  </if>
                  <where>
                      id=#{id}
                  </where>
              </set>-->
        <trim prefix="set" suffixOverrides=",">
            <if test="lastName!=null">
                last_name=#{lastName},
            </if>
            <if test="gender!=null">
                gender=#{gender},
            </if>
            <if test="email!=null">
                email=#{email}
            </if>
        </trim>
        <where>
            id=#{id}
        </where>
    </update>

    <!--foreach-->
    <insert id="insertEmployeesByForeach">
        <!-- INSERT INTO tbl_employee(last_name,gender,email,d_id)VALUES
         <foreach collection="emps" item="emp" separator=",">
             (#{emp.lastName},#{emp.gender},#{emp.email},#{emp.department.id})
         </foreach>-->

        <foreach collection="emps" item="emp" separator=";">
            INSERT INTO tbl_employee(last_name,gender,email,d_id)VALUES
            (#{emp.lastName},#{emp.gender},#{emp.email},#{emp.department.id})
        </foreach>

    </insert>

    <!-- 两个内置参数：
        不只是方法传递过来的参数可以被用来判断，取值。。。
        mybatis默认还有两个内置参数：
        _parameter:代表整个参数
            单个参数：_parameter就是这个参数
            多个参数：参数会被封装为一个map；_parameter就是代表这个map

        _databaseId:如果配置了databaseIdProvider标签。
            _databaseId就是代表当前数据库的别名oracle
     -->

    <select id="getEmpsByInnerParameter" resultType="com.xupt.mybatis.pojo.Employee">
        <if test="_databaseId=='mysql'">
            select * from tbl_employee
            <if test="_parameter!=null">
                where last_name like #{lastName}
            </if>
        </if>
        <if test="_databaseId=='oracle'">
            select * from employee
            <if test="_parameter!=null">
                where last_name like #{_parameter.lastName}
            </if>
        </if>
    </select>

</mapper>